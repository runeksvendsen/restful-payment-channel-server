swagger: '2.0'

info:
  version: "2.1.0"
  title: RESTful Bitcoin Payment Channel Protocol (v2)
  description: |
    A Bitcoin payment channel enables sending bitcoins between two parties instantly, securely and without fees. The intended use is consumer-to-merchant payments, allowing a consumer to make many small payments to a merchant - with whom the consumer has an open payment channel - while only paying the Bitcoin transaction fee once, when the channel is closed. 
    
    An arbitrary number of payments can be made over the course of, say, one week, and at the end of this week the settlement transaction is published, thus reducing the Bitcoin transaction fee to something that has to be paid every week, rather every time a transaction is made.
    
    The payment server speaking this protocol is the recipient of value. Arbitrary application data can be included with the payment by the client, and returned in response to a payment by the server.
    
    * Server implementation (in progress): https://github.com/runeksvendsen/restful-payment-channel-server
    
    * JavaScript client library (in progress): https://github.com/runeksvendsen/paychanjs-client
  
basePath: /v2
schemes:
  - https

paths:
  /funding/{client_pubkey}/{exp_time}/info:
    get:
      summary: Retrieve information about how to fund a new payment channel
      description: |
        Before opening a payment channel with the server, the client must first acquire the server public key, in order to calculate a funding address for the channel.
      
        The client will first calculate the funding address, confirm that it matches the server's, then pay to the funding address, and wait until the funding transaction has the server-specified number of confirmations (**funding_tx_min_conf**).
        
        After this, the client will create a new payment of value equal to the server-specified (**open_price**), and POST this payment to the channel URI to open the channel. Further payments are made though a PUT request on the same URI.
      operationId: getFundingInfo
      parameters:
        - $ref: "#/parameters/clientPubKeyParam"
        - $ref: "#/parameters/expTimeParam"
      responses:
        200:
          description: Proceed with funding
          schema:
            $ref: "#/definitions/FundingInfo"
        400:
          description: Invalid parameter
  
  /channels/{client_pubkey}/{exp_time}/{funding_txid}/{funding_vout}:
    post:
      summary: Create a new payment channel
      description: |
        After publishing the funding Bitcoin transaction, and waiting for the specified number of confirmations, the client will POST a payment, paying the server's specified channel open price, to this URL. Subsequent channel payments will be PUT on this same URL.
        
        For information on how to create a payment, see documentation on the PUT request (on this resource) and the **PaymentData** object.
        
      operationId: createPaymentChannel
      parameters:
        - $ref: "#/parameters/clientPubKeyParam"
        - $ref: "#/parameters/expTimeParam"
        - $ref: "#/parameters/fundingSourceTxIdParam"
        - $ref: "#/parameters/fundingSourceVoutParam"
        - $ref: "#/parameters/clientServerSecret"
        - $ref: "#/parameters/paymentBodyParam"
      responses:
        201:
          description: Channel created
          schema:
            $ref: "#/definitions/PaymentResult"
          headers:
            Location:
              description: "URL of the newly opened channel"
              type: string
              format: uri
        409:
          description: Channel already exists
          headers:
            Location:
                description: "URL of the already open channel"
                type: string
                format: uri
        400:
          description: Invalid parameter
    put:
      summary: Send value
      description: |
        Make payment over an existing payment channel.
        
        To pay the server, the client will create a new **PaymentData** object with the source of funding set to the outpoint specified by the *'funding_txid'* and **funding_vout** parameters. The client change amount is decremented by the desired payment amount, and the change address is set to the channel funding address (in order to allow the server to free the received funds without involvement from the client). Only 'change_value' and 'signature_data' change for new payments. 
      operationId: payPaymentChannel
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: "#/parameters/clientPubKeyParam"
        - $ref: "#/parameters/expTimeParam"
        - $ref: "#/parameters/fundingSourceTxIdParam"
        - $ref: "#/parameters/fundingSourceVoutParam"
        - $ref: "#/parameters/clientServerSecret"
        - $ref: "#/parameters/paymentBodyParam"
      responses:
        200:
          description: Value received
          schema:
            $ref: "#/definitions/PaymentResult"
        318:
          description: The payment resource has moved permanently. Perform this request, and all future requests, using the resource specified in the **Location** header (same as 308 but request body data needs to be updated to fit new resource).
          headers:
            Location:
              description: "New payment resource location"
              type: string
              format: uri
        400:
          description: Invalid parameter
        410:
          description: The channel is in the process of being closed. Performing a DELETE request on the resource in a few seconds should return information about the closed channel.
  /channels/{client_pubkey}/{exp_time}/{funding_txid}/{funding_vout}/close:
    put:
      summary: Close payment channel
      description: In order to enable the server to return unsent funds to the client, the client must provide a payment of zero value with the **change_address** field set according to the client's wish (as opposed to a payment where **change_address** always equals the channel funding address). After a successful request, the settling transaction is published to the Bitcoin network, and the **PaymentResult** response will include its transaction ID. 
      operationId: deletePaymentChannel
      parameters:
        # path
        - $ref: "#/parameters/clientPubKeyParam"
        - $ref: "#/parameters/expTimeParam"
        - $ref: "#/parameters/fundingSourceTxIdParam"
        - $ref: "#/parameters/fundingSourceVoutParam"
        - $ref: "#/parameters/clientServerSecret"
        - $ref: "#/parameters/paymentBodyParam"
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: Channel closed, funds settled. The settling transaction has been published to the Bitcoin network.
          schema:
            $ref: "#/definitions/PaymentResult"
        400:
          description: Invalid parameter
          
parameters:
    expTimeParam:
      name: exp_time
      in: path
      description: Expiration date/time for the channel (Unix timestamp)
      required: true
      type: integer
      format: uint32
    clientPubKeyParam:
      name: client_pubkey
      in: path
      description: Client/value sender public key. Hex-encoded, compressed Secp256k1 pubkey, 33 bytes.
      required: true
      type: string
    fundingSourceTxIdParam:
      name: funding_txid
      in: path
      description: The Bitcoin transaction ID part of the outpoint in the Blockchain which holds the client's channel balance.
      type: string
      required: true
    fundingSourceVoutParam:
      name: funding_vout
      in: path
      description: The output index part of the outpoint in the Blockchain which holds the client's channel balance.
      type: integer
      required: true
    clientServerSecret:
      name: secret
      in: query
      description: SHA256 hash of the opening channel payment ECDSA signature data (**signature_data** in **PaymentData**), hex-encoded. This acts as a secret known only to the client and server, thereby preventing third parties from figuring out payment resource URLs by looking through the blockchain, thus acting as denial-of-service protection for the server operator. A 404 response should be returned in case the server receives a request with an incorrect client secret.
      type: string
      required: true
    paymentBodyParam:
      name: payment_data
      in: body
      description: Payment data
      required: true
      schema:
        $ref: "#/definitions/PaymentData"

definitions:
  FundingInfo:
    type: object
    required:
      - server_pubkey
      - dust_limit
      - funding_address_copy
      - redeem_script_copy
      - open_price
      - funding_tx_min_conf
      - settlement_period_hours
      - min_duration_hours
    properties:
      server_pubkey:
        description: Server/value receiver public key. Hex-encoded, compressed Secp256k1 pubkey, 33 bytes.
        type: string
        example: "029b5549e8cac42d27051956925d8176408b2183ba357850f58320ad5876b9c13f"
      dust_limit:
        description: (Satoshis) The server will not accept payments where the client change amount is less than this amount. This "dust limit" is necessary in order to avoid producing a settlement transaction that will not circulate in the Bitcoin P2P network because it contains an output of minuscule value. Consequently, the maximum amount, that can be sent over the payment channel, is the amount sent to the funding address minus this "dust limit".
        type: integer
        format: uint64
        example: 500
      funding_address_copy:
        description: Server derived channel funding address. The client will confirm that its own derived funding address matches this one, before paying to it.
        type: string
        example: "2NCTirSGjFM8T7hUow3AcfyFaw1N1APnYuP"
      redeem_script_copy:
        description: Server derived channel redeem script. Defines sender, receiver and channel expiration date. Used to construct the input in the payment transaction. The client will verify, at the very least, that the expiration time is what it expects. Hex-encoded.
        type: string
        example: "63210225b3aaf58992a8cc909522c2ec859ef218fd29fda0a6723cfb4e0529f80cc8f3ad6704002f6859b175682103da3afe4f58992a8cc909522c2ec859ef218fd92fda0a67c23fb40e0303030405ac"
      open_price:
        description: Price (in satoshis) for opening a channel with the given {exp_time}. This amount is paid in the initial channel payment when opening a new channel. May be zero, in which case a payment of zero value is used.
        type: integer
        format: uint64
        minimum: 0
        example: 25000
      funding_tx_min_conf:
        description: Minimum confirmation count that the funding transaction must have before proceeding with opening a new channel.
        type: integer
        format: int32
        minimum: 0
        example: 6
      settlement_period_hours:
        description: The server reserves the right to close the payment channel this many hours before the specified expiration date. The server hasn't received any actual value until it publishes a payment transaction to the Bitcoin network, so it needs a window of time in which the client can no longer send payments over the channel, and yet the channel refund transaction hasn't become valid. 
        type: integer
        minimum: 0
        example: 12
      min_duration_hours:
        description: The minimum duration of newly opened payment channels. 
        type: integer
        minimum: 0
        example: 48
  
  PaymentData:
    description: |
      A payment comprises a signature over a Bitcoin transaction with a decremented client change value. The Bitcoin transaction redeems the outpoint specified by 'funding_txid' and 'funding_vout' (a P2SH output governed by 'redeem_script'), and pays 'change_value' to 'change_address'.
    type: object
    required:
      - funding_txid
      - funding_vout
      - signature_data
      - change_value
      - change_address
      - redeem_script
      - sighash_flag
    properties:
      redeem_script:
        description: The funds sent to the funding address are bound by this contract (Bitcoin script). The data is needed to construct the payment signature. Hex-encoded data.
        type: string
        example: "63210225b3aaf58992a8cc909522c2ec859ef218fd29fda0a6723cfb4e0529f80cc8f3ad6704002f6859b175682103da3afe4f58992a8cc909522c2ec859ef218fd92fda0a67c23fb40e0303030405ac"
      funding_txid:
        description: The transaction ID of the Bitcoin transaction paying to the channel funding address.
        type: string
        example: "88173df15ec17490288cabaa9a0becfdef3614d9526eec16f670886d7d229301"
      funding_vout:
        description: The output index/"vout" of the output (in the transaction) payingto the channel funding address.
        type: integer
        format: uint32
        example: 1
      signature_data:
        description: |
          DER-encoded ECDSA signature (in hex). This is a SIGHASH_SINGLE|ANYONECANPAY signature over the the "payment transaction", which is a Bitcoin transaction that: redeems the outpoint specified by 'funding_txid' and 'funding_vout' using the redeem script defined in 'redeem_script', with an output which sends 'change_value' to 'change_address'.
        type: string
        example: "304402202... (~72 bytes)"
      change_value:
        description: The value sent back to the client in the payment transaction. The total amount transferred to the server is this amount subtracted from the value sent to the channel funding address.
        type: integer
        format: uint64
        example: 1000000
      change_address:
        description: The client change address as used in the only output of the payment transaction.
        type: string
        example: "19xUUsSomTCbS9Ar3m1e6j3zqGBANz6d6t"
      sighash_flag:
        description: Specifies which parts of the payment Bitcoin transaction are signed. Hex-encoded, single byte; in both v1 and v2 always equal to "83" (0x83), which is **SIGHASH_SINGLE|ANYONECANPAY**, meaning the client only signs its own output, and also allowing more to be added.
        type: string
        example: 83
        
  PaymentResult:
    type: object
    required:
      - channel_status
      - channel_value_left
      - value_received
      - settlement_txid
      - application_data
    properties:
      channel_status:
        description: Equal to "open" if the channel is still open, otherwise "closed". The channel is automatically closed when there is no value left to send. If a payment sends all remaining channel value to the server, the server will close the channel and set this field to "closed".
        type: string
        example: "open"
      channel_value_left:
        description: Remaining channel value. This is the amount that the client/sender would receive if the channel was closed now.
        type: integer
        minimum: 0
        example: 1700000
      value_received:
        description: Value of the payment that was just received. This is the additional value assigned to the receiver/server with this payment.
        type: integer
        minimum: 0
        example: 1000
      settlement_txid:
        description: |
          If channel_status equals "closed": the transaction ID of the Bitcoin transaction which settles the channel; otherwise null.
        type: string
        example: "4d2c20ea63729a8f248904faf585bd52dc9bd52c59ea36b0c6cea5e425f0c4e9"
      application_data:
        description: |
          Optional application data (may be 'null'). The application, that is using this payment channel protocol to transmit value, may wish to include some application-specific data in response to a payment. This field is for that. The format is left entirely up to the application.
        type: string
        example: "{ 'secret_code' : '2cd3b27536165ee6f110857c483509cb' }"


